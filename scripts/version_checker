#!/usr/bin/env python3
from backbone.version_checker import VersionChecker
import argparse
import rospy
import rostopic

def check_positive(value):
    ival = int(value)
    if ival <= 0:
        raise argparse.ArgumentTypeError(f"Got {ival}, please provide a positive non zero value")
    else:
        return ival
def main() -> int:
    parser = argparse.ArgumentParser(
        description="Checks the version of the messages sent to a topic"
    )
    parser.add_argument(
        "-t",
        "--topic",
        metavar="topic",
        type=str,
        help="Topic to control",
        required=True,
    )
    parser.add_argument(
        "-m",
        "--message_type",
        metavar="std_msgs/String",
        type=str,
        help="Type of messages that gets published on target topic",
        required=False,
    )
    parser.add_argument(
        "-r",
        "--rate",
        metavar="100",
        type=check_positive,
        default=1,
        required=False,
        help="Sets how many incosistent messages to wait  before logging the error (default: 1)"
    )
    args = parser.parse_args()
    
    rospy.init_node(name="version_checker", anonymous=True)
    
    ver = rospy.get_param(f"{args.topic}_version", None)
    if args.message_type:
        message_type = args.message_type
    else:
        message_type = rostopic.get_topic_type(args.topic, blocking=True)[0]
    if not ver:
        raise ValueError(
            f"please remember to setup the {args.topic}_version parameter on the master node "
        )
    else:
        checker = VersionChecker(f"{args.topic}", args.message_type,args.rate)
        rospy.spin()
        return 0


if __name__ == "__main__":
    raise SystemExit(main())
